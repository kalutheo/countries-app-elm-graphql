-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Countries.Query exposing (ContinentOptionalArguments, CountryOptionalArguments, LanguageOptionalArguments, continent, continents, countries, country, language, languages)

import Countries.InputObject
import Countries.Interface
import Countries.Object
import Countries.Scalar
import Countries.ScalarDecoders
import Countries.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| -}
continents : SelectionSet decodesTo Countries.Object.Continent -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
continents object_ =
    Object.selectionForCompositeField "continents" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias ContinentOptionalArguments =
    { code : OptionalArgument String }


{-|

  - code -

-}
continent : (ContinentOptionalArguments -> ContinentOptionalArguments) -> SelectionSet decodesTo Countries.Object.Continent -> SelectionSet (Maybe decodesTo) RootQuery
continent fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { code = Absent }

        optionalArgs =
            [ Argument.optional "code" filledInOptionals.code Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "continent" optionalArgs object_ (identity >> Decode.nullable)


{-| -}
countries : SelectionSet decodesTo Countries.Object.Country -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
countries object_ =
    Object.selectionForCompositeField "countries" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias CountryOptionalArguments =
    { code : OptionalArgument String }


{-|

  - code -

-}
country : (CountryOptionalArguments -> CountryOptionalArguments) -> SelectionSet decodesTo Countries.Object.Country -> SelectionSet (Maybe decodesTo) RootQuery
country fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { code = Absent }

        optionalArgs =
            [ Argument.optional "code" filledInOptionals.code Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "country" optionalArgs object_ (identity >> Decode.nullable)


{-| -}
languages : SelectionSet decodesTo Countries.Object.Language -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
languages object_ =
    Object.selectionForCompositeField "languages" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias LanguageOptionalArguments =
    { code : OptionalArgument String }


{-|

  - code -

-}
language : (LanguageOptionalArguments -> LanguageOptionalArguments) -> SelectionSet decodesTo Countries.Object.Language -> SelectionSet (Maybe decodesTo) RootQuery
language fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { code = Absent }

        optionalArgs =
            [ Argument.optional "code" filledInOptionals.code Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "language" optionalArgs object_ (identity >> Decode.nullable)
